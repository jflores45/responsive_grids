html{
  scroll-behavior: smooth;
}

body{
  background-color: #737373;
  font-size: 18px;
  line-height: 1.15;
  margin: 0;
  padding: 0;
}


.overview{
  background-attachment: fixed; /* Parallax effect */     
  background-position: center;  /* Parallax effect */
  background-repeat: no-repeat; /* Parallax effect */
  background-size: cover;       /* Parallax effect */
  color: white;
  height: 400px;                /* Parallax effect */
}


.overview p{
  color: white;
  font-size: 24px;
  padding: 0 100px;
  text-align: center;
}

h1{
  font-size: 50px;
  line-height: 1;
  padding: 50px 0;
  text-align: center;
}

h2{
  font-size: 32px;
  line-height: 1.5;
}


nav li{
  display:inline;
  padding-right:20px;

}

nav a{
  color: black;
  font-weight: bold;
  text-decoration: none; 
  
}

.skip a {
  background: white;
  position: absolute; /* Position it relative to its parent */
  top: -40px; /* Initially, hide it 40px above the top of its parent */
  left: 0;
  padding: 6px;
  -webkit-transition: top 1s ease-out;
  transition: top 1s ease-out;
  z-index: 1;
}

nav{
  background-color: #ddd;
  padding: 25px 0; 
  text-align: left;
}

footer{
  background-color: black;
  color: white;
  padding-top: 30px;
  text-align: center;
}


.text-block{
  background-color: rgba(255, 255, 255, .8);
  border: 10px solid black;
  padding: 30px;
}


@media screen and (prefers-reduced-motion: reduce){
  html{
      scroll-behavior: auto; /* Removes scroll animation */
  }

  .skip a{
    -webkit-transition: none; /* sets to default setting */
    transition: none;        /* sets to default setting */
   }

  /*Turn off parallax*/
  header{
    background-attachment: initial;
  }
}

/*Your Code Here*/
/* PLEASE DO NOT REMOVE MY COMMENTS.  THEY HELP US HELP YOU DEBUG. */

/* Step 1: Write selector/rule property to add an underline when
links in the navigation are in the hover or focus state.*/

nav a:hover,
nav a:focus {
  text-decoration: underline;
 
}
/* Step 2a: Write selector/rule property to position the default position for the skip class element*/

.skip a:default {
  position: absolute; /* Position it relative to its parent */
  top: -40px; 
}


/* Step 2b: Write selector/rule property to position the skip class element when it is in focus*/
.skip a:focus {
  top: 20px; /* Move it 20px below the top of its parent */
 
}

/* Step 3: Write selector/rule property to style all elements when in focus */
*:focus {
  outline: 2px solid black; /* Add a 2px solid black border when any element is in focus */
}

/* Step 4: Write selector/rule property to style the container */
.container {
  display: grid;
  grid-template-columns: 1fr 5fr 1fr;
  gap: 15px;
}

/* Step 5: Write selector/rule property to add the background image to the 
first div in the grid  and place it in the grid. */

/* Step 5: Add the background image to the first div in the grid */
.container > :first-child {
  grid-column: 1 / -1; /* Take up all columns */
  min-height: 500px; /* Minimum height of 500px */
  background-image: url('/images/header.jpg'); /* Background image */
  background-repeat: no-repeat;
  background-attachment: fixed; /* Parallax effect */
  background-position: center; /* Parallax effect */
  background-size: cover; /* Parallax effect */
}

/* Step 6: Style the classes .about, .method, .clients, and .contact */
.about, .method, .clients, .contact {
  grid-column: 2 / 3; /* Begin in the 2nd column and span one column */
}

/* Step 7: Specify the grid rows for .about, .method, .clients, and .contact */
.about {
  grid-row: 2; /* Begin on the 2nd row */
}

.method {
  grid-row: 3; /* Begin on the 3rd row */
}

.clients {
  grid-row: 4; /* Begin on the 4th row */
}

.contact {
  grid-row: 5; /* Begin on the 5th row */
}

/* Step 8: Style .about-image, .method-image, .clients-image, and .contact-image */
.about-image, .method-image, .clients-image, .contact-image {
  grid-column: 1 / -1; /* Cover all columns */
  max-height: 600px; /* Maximum height of 600px */
  overflow: hidden;
}

/* Step 9: Specify the grid rows for .about-image, .method-image, .clients-image, and .contact-image */
.about-image {
  grid-row: 2; /* Begin on the 2nd row */
}

.method-image {
  grid-row: 3; /* Begin on the 3rd row */
}

.clients-image {
  grid-row: 4; /* Begin on the 4th row */
}

.contact-image {
  grid-row: 5; /* Begin on the 5th row */
}

 /* Step 8: Write the selector/rule property to style the .text-block class. */
 .about.text-block,
 .method.text-block,
 .clients.text-block,
 .contact.text-block {
   display: flex;
   flex-direction: column;
   justify-content: center;
   align-items: center;
   text-align: center;
   max-height: 250px;
   overflow: auto; /* Add scrollbars if content overflows */
 }
 
/* Add your media query here */
  /* Step 9: Write the selector/rule property to style the nav element */

/* use this for 497 extension display */
/* nav {
  position: fixed;
  top: 30px;
  right: 30px;
  bottom: 30px;
  left: auto;
  padding: 30px 0;
  background-color: white; 
  z-index: 999; 
} */

    /* Move the navigation to the other side of the window */
 
     /* Media query for desktop view (windows of 800px or greater)  */
 

     @media screen and (min-width: 800px) {
      nav {
        text-align: right; /* Align navigation to the right */
        padding: 30px 0; /* Adjust padding as required */
      }
    }
    /* Update .container class for desktop view */
    @media screen and (min-width: 800px) {
      .container {
        display: grid;
        grid-template-columns: 50px auto 500px auto 50px; /* Five columns */
        gap: 15px;
      }
    }
    /* Update positions and spans for desktop view */
    @media screen and (min-width: 800px) {
      .about, .clients, .method-image, .contact-image {
        grid-column: 3 / span 2; /* Begin in the third column, span two columns */
      }
    
      .method, .contact, .about-image, .clients-image {
        grid-column: 2 / span 2; /* Begin in the second column, span two columns */
      }
    }

  /* Step 10: Write the selector/rule property to update the .container class */

  /* Steps 11 and 12: Update the grid-column property of the grid's children (where-needed)*/


